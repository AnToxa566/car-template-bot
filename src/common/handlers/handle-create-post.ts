import { InputMediaPhoto } from "grammy/types";
import { InlineKeyboard, InputMediaBuilder, Keyboard } from "grammy";

import { Fuel } from "../enums/fuel.enum.js";
import { Occasion } from "../enums/occasion.enum.js";
import { Transmission } from "../enums/transmission.enum.js";
import { ICar } from "../interfaces/car.interface.js";
import { getCarPostText } from "../utils/get-car-post-text.js";
import {
  CarPostContext,
  CarPostConversation,
} from "../types/car-post-context.type.js";
import { searchLocations } from "../utils/search-locations.js";
import { findLocationById } from "../utils/find-location-by-id.js";
import { ILocation } from "../interfaces/location.interface.js";
import { channelService } from "../../services/channels/channel.service.js";

export const fuelChoosingInlineKeyboard = InlineKeyboard.from(
  Object.values(Fuel).map((fuel) => [InlineKeyboard.text(fuel)])
);

export const occasionChoosingInlineKeyboard = InlineKeyboard.from(
  Object.values(Occasion).map((occasion) => [InlineKeyboard.text(occasion)])
);

export const transmissionChoosingInlineKeyboard = InlineKeyboard.from(
  Object.values(Transmission).map((transmission) => [
    InlineKeyboard.text(transmission),
  ])
);

export const handleCreatePost = async (
  conversation: CarPostConversation,
  ctx: CarPostContext
) => {
  const post = {} as ICar;

  const photos: InputMediaPhoto[] = [];

  await ctx.reply("–§–æ—Ç–æ üåÑ", {
    reply_markup: new Keyboard().text("–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ üö™"),
  });

  while (true) {
    const photo = await conversation.waitFor(["message:photo", "message:text"]);

    if (photo.message.photo) {
      photos.push(InputMediaBuilder.photo(photo.message.photo[0].file_id));
    } else {
      break;
    }
  }

  await ctx.reply("–ß–µ–∫–∞—é –Ω–∞ –Ω–∞–∑–≤—É –∞–≤—Ç–æ üìù", {
    reply_markup: { remove_keyboard: true },
  });
  post.title = await conversation.form.text();

  await ctx.reply("–†—ñ–∫ –≤–∏–ø—É—Å–∫—É üìÖ");
  post.issue_year = await conversation.form.number();

  await ctx.reply("–í–∞—Ä—Ç—ñ—Å—Ç—å ($) üí∞");
  post.price = await conversation.form.number();

  await ctx.reply("–ú—ñ—Å—Ç–æ üèôÔ∏è");
  const locationSearch = await conversation.form.text();
  const locations = searchLocations(locationSearch);

  const locationInlineKeyboard = InlineKeyboard.from(
    locations.map((location) => [
      InlineKeyboard.text(location.fullName, location.data.id.toString()),
    ])
  );

  await ctx.reply("–í–∏–±–µ—Ä–∏ –º—ñ—Å—Ç–æ –∑—ñ —Å–ø–∏—Å–∫—É üëá", {
    reply_markup: locationInlineKeyboard,
  });
  const selectedLocationId = (
    await conversation.waitForCallbackQuery(
      locations.map((l) => l.data.id.toString())
    )
  ).match;
  post.city = findLocationById(Number(selectedLocationId)) as ILocation;

  await ctx.reply("–ü—Ä–æ–±—ñ–≥ (—Ç–∏—Å. –∫–º) üõ£Ô∏è");
  post.mileage = await conversation.form.number();

  await ctx.reply("VIN –∫–æ–¥ ü™™");
  post.vin_code = await conversation.form.text();

  await ctx.reply("–í–∏–±–µ—Ä–∏ —Ç–∏–ø –ø–∞–ª–∏–≤–∞ ‚õΩÔ∏è", {
    reply_markup: fuelChoosingInlineKeyboard,
  });
  post.fuel = (await conversation.waitForCallbackQuery(Object.values(Fuel)))
    .match as Fuel;

  if (post.fuel === Fuel.Electric) {
    await ctx.reply("–Ñ–º–Ω—ñ—Å—Ç—å –∞–∫—É–º—É–ª—è—Ç–æ—Ä–∞ (–∫–í—Ç‚Ä¢–≥–æ–¥) üîã");
    post.battery_capacity = await conversation.form.number();

    await ctx.reply("–ó–∞–ø–∞—Å —Ö–æ–¥—É (–∫–º) üîå");
    post.power_reserve = await conversation.form.number();
  } else {
    await ctx.reply("–û–± º—î–º –¥–≤–∏–≥—É–Ω–∞ (–ª) ‚öôÔ∏è");
    post.engine_capacity = await conversation.form.number();

    await ctx.reply("–í–∏–±–µ—Ä–∏ –∫–æ—Ä–æ–±–∫—É –ø–µ—Ä–µ–¥–∞—á üì¶", {
      reply_markup: transmissionChoosingInlineKeyboard,
    });
    post.transmission = (
      await conversation.waitForCallbackQuery(Object.values(Transmission))
    ).match as Transmission;
  }

  await ctx.reply("–í–∏–±–µ—Ä–∏ –ø—Ä–∏–≤—ñ–¥ üõû", {
    reply_markup: occasionChoosingInlineKeyboard,
  });
  post.occasion = (
    await conversation.waitForCallbackQuery(Object.values(Occasion))
  ).match as Occasion;

  await ctx.reply("–û–ø–∏—à–∏ —Ü—é –∫—Ä–∞–ª—é üí¨");
  post.description = await conversation.form.text();

  await ctx.reply("–ö—É–¥–∏ –∑–≤–æ–Ω–∏—Ç–∏? üìû");
  post.phone_number = await conversation.form.text();

  await ctx.reply("–Ü–º º—è –≤–ª–∞—Å–Ω–∏–∫–∞ üíÅ‚Äç‚ôÇÔ∏è");
  post.owner_name = await conversation.form.text();

  photos[0].caption = getCarPostText(post);
  photos[0].parse_mode = "HTML";

  await ctx.replyWithMediaGroup(photos);
  const channels = await channelService.findAll();

  if (channels.length) {
    const chennelsKeyboard = InlineKeyboard.from(
      channels.map((channeel) => [
        InlineKeyboard.text(channeel.slug, channeel.name),
      ])
    );

    const publishingMessage = await ctx.reply(
      "–ù–µ—Ö–∞–π —Ü–µ–π –ø–æ—Å—Ç –ø–æ–±–∞—á–∏—Ç—å —Å–≤—ñ—Ç üì¢",
      {
        reply_markup: chennelsKeyboard,
      }
    );

    const channelName = (
      await conversation.waitForCallbackQuery(channels.map((ch) => ch.name))
    ).match;

    try {
      await ctx.api.sendMediaGroup(channelName.toString(), photos);
      await ctx.reply("–í–∂—É—Ö, –≤–∂–µ –Ω–∞ –∫–∞–Ω–∞–ª—ñ ü™Ñ");
    } catch (err) {
      await ctx.reply("–£–ø—Å, —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ ü•≤");
      console.log(err);
    } finally {
      await ctx.api.deleteMessage(
        ctx.message?.chat.id || "undefined",
        publishingMessage.message_id
      );
    }
  }
};
