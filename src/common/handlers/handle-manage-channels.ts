import { InlineKeyboard } from "grammy";

import { channelService } from "../../services/channels/channel.service.js";
import {
  CarPostContext,
  CarPostConversation,
} from "../types/car-post-context.type.js";

export const handleManageChannels = async (
  conversation: CarPostConversation,
  ctx: CarPostContext
) => {
  const chatId = ctx.message?.chat.id.toString() || "";

  const channels = await channelService.findAll({ chatId });

  if (channels.length) {
    const chennelsKeyboard = InlineKeyboard.from(
      channels.map((channel) => [InlineKeyboard.text(channel.slug, channel.id)])
    );

    const message = await ctx.reply(
      "–í–∏–±–µ—Ä—ñ—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ —Ä–µ–¥–∞–≥—É–≤–Ω–Ω—è ‚öôÔ∏è",
      {
        reply_markup: chennelsKeyboard,
      }
    );

    const channelId = (
      await conversation.waitForCallbackQuery(channels.map((ch) => ch.id))
    ).match;
    const channel = channels.find((ch) => ch.id === channelId) || channels[0];

    await ctx.api.editMessageText(
      chatId,
      message.message_id,
      `–û–±—Ä–∞–Ω–æ: ${channel.slug} (${channel.name})\n–©–æ —Ä–æ–±–∏–º–æ?`,
      {
        reply_markup: new InlineKeyboard()
          .text("–ó–º—ñ–Ω–∏—Ç–∏ –Ω–∞–∑–≤—É", "change_slug")
          .row()
          .text("–ó–º—ñ–Ω–∏—Ç–∏ id –∫–∞–Ω–∞–ª—É", "change_name")
          .row()
          .text("–í–∏–¥–∞–ª–∏—Ç–∏ –∫–∞–Ω–∞–ª üóëÔ∏è", "delete_channel"),
      }
    );

    const action = (
      await conversation.waitForCallbackQuery([
        "change_slug",
        "change_name",
        "delete_channel",
      ])
    ).match;

    switch (action) {
      case "change_slug":
        await ctx.reply("–î–æ–±—Ä–µ. –ß–µ–∫–∞—é –Ω–∞ –Ω–æ–≤—É –Ω–∞–∑–≤—É –¥–ª—è –∫–∞–Ω–∞–ª—É");
        const channelSlug = await conversation.form.text();

        await channelService.update({ ...channel, slug: channelSlug });
        await ctx.reply("–ù–∞–∑–≤—É –∫–∞–Ω–∞–ª–∞ –≤—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω–Ω–æ ‚úÖ");

        break;
      case "change_name":
        await ctx.reply("–î–æ–±—Ä–µ. –ß–µ–∫–∞—é –Ω–∞ –Ω–æ–≤–∏–π id –∫–∞–Ω–∞–ª—É");
        const id = await conversation.form.text();

        await channelService.update({ ...channel, name: id });
        await ctx.reply("ID –∫–∞–Ω–∞–ª–∞ –≤—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω–Ω–æ ‚úÖ");

        break;
      case "delete_channel":
        await channelService.delete(channelId.toString());
        await ctx.reply("–ö–∞–Ω–∞–ª —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ ‚úÖ");

        break;
      default:
        await ctx.reply("–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ ü•≤");
        break;
    }
  } else {
    await ctx.reply("–í–∏ —â–µ –Ω–µ –¥–æ–¥–∞–ª–∏ –∂–æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª—É ü•∫");
  }
};
